---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: deployment-platform
  namespace: deployment-platform
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: deployment-platform-reader
rules:
- apiGroups: [""]
  resources: ["pods", "services", "nodes", "namespaces", "events", "persistentvolumes", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["argoproj.io"]
  resources: ["applications"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: deployment-platform-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: deployment-platform-reader
subjects:
- kind: ServiceAccount
  name: deployment-platform
  namespace: deployment-platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-platform
  namespace: deployment-platform
  labels:
    app.kubernetes.io/name: deployment-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: deployment-platform
  template:
    metadata:
      labels:
        app.kubernetes.io/name: deployment-platform
        app.kubernetes.io/component: dashboard
    spec:
      serviceAccountName: deployment-platform
      containers:
      - name: dashboard
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: dashboard-content
          mountPath: /usr/share/nginx/html
          readOnly: true
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: dashboard-content
        configMap:
          name: deployment-platform-config
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: deployment-platform
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        
        # Serve the dashboard
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
        }
        
        # Proxy Kubernetes API calls
        location /api/ {
            proxy_pass https://kubernetes.default.svc.cluster.local/api/;
            proxy_ssl_verify off;
            proxy_set_header Authorization "Bearer $http_authorization";
            proxy_set_header Accept application/json;
            proxy_set_header Content-Type application/json;
            
            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Proxy Kubernetes APIs (for metrics, apps, etc.)
        location /apis/ {
            proxy_pass https://kubernetes.default.svc.cluster.local/apis/;
            proxy_ssl_verify off;
            proxy_set_header Authorization "Bearer $http_authorization";
            proxy_set_header Accept application/json;
            proxy_set_header Content-Type application/json;
            
            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
    }
